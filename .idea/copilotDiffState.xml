<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/crud/purchase_orders.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/crud/purchase_orders.py" />
              <option name="originalContent" value="from sqlalchemy.orm import Session&#10;from app.models.purchase_orders import PurchaseOrder&#10;from app.schemas.purchase_orders import PurchaseOrderSchemas&#10;&#10;&#10;class PurchaseOrderCRUD:&#10;&#10;    def __init__(self, db: Session, purchase_order_schemas=PurchaseOrderSchemas):&#10;        self.db = db&#10;        self.purchase_order_schemas = purchase_order_schemas&#10;&#10;    def get_purchase_order(self, order_id: int):&#10;        return self.db.query(PurchaseOrder).filter(PurchaseOrder.id == order_id).first()&#10;&#10;    def get_purchase_orders(self):&#10;        return self.db.query(PurchaseOrder).all()&#10;&#10;    def create_purchase_order(self, order: 'PurchaseOrderSchemas.PurchaseOrderCreate'):&#10;        db_order = PurchaseOrder(&#10;            order_number=order.order_number,&#10;            assistant_id=order.assistant_id,&#10;            analyst_id=order.analyst_id,&#10;            status=order.status,&#10;            total_amount=order.total_amount,&#10;            notes=order.notes&#10;        )&#10;        self.db.add(db_order)&#10;        self.db.commit()&#10;        self.db.refresh(db_order)&#10;        return db_order&#10;&#10;    def update_purchase_order(self, order_id: int, order_update: 'PurchaseOrderSchemas.PurchaseOrderUpdate'):&#10;        db_order = self.get_purchase_order(order_id)&#10;        if not db_order:&#10;            return None&#10;        update_data = order_update.dict(exclude_unset=True)&#10;        for key, value in update_data.items():&#10;            setattr(db_order, key, value)&#10;        self.db.commit()&#10;        self.db.refresh(db_order)&#10;        return db_order&#10;&#10;    def delete_purchase_order(self, order_id: int):&#10;        db_order = self.get_purchase_order(order_id)&#10;        if not db_order:&#10;            return None&#10;        self.db.delete(db_order)&#10;        self.db.commit()&#10;        return db_order&#10;" />
              <option name="updatedContent" value="from sqlalchemy.orm import Session&#10;from app.models.purchase_orders import PurchaseOrder&#10;from app.schemas.purchase_orders import PurchaseOrderSchemas&#10;&#10;&#10;class PurchaseOrderCRUD:&#10;&#10;    def __init__(self, db: Session, purchase_order_schemas=PurchaseOrderSchemas):&#10;        self.db = db&#10;        self.purchase_order_schemas = purchase_order_schemas&#10;&#10;    def get_purchase_order(self, order_id: int):&#10;        return self.db.query(PurchaseOrder).filter(PurchaseOrder.id == order_id).first()&#10;&#10;    def get_purchase_orders(self):&#10;        return self.db.query(PurchaseOrder).all()&#10;&#10;    def create_purchase_order(self, order: 'PurchaseOrderSchemas.PurchaseOrderCreate'):&#10;        db_order = PurchaseOrder(&#10;            order_number=order.order_number,&#10;            assistant_id=order.assistant_id,&#10;            analyst_id=order.analyst_id,&#10;            status_id=order.status_id,&#10;            total_amount=order.total_amount,&#10;            notes=order.notes&#10;        )&#10;        self.db.add(db_order)&#10;        self.db.commit()&#10;        self.db.refresh(db_order)&#10;        return db_order&#10;&#10;    def update_purchase_order(self, order_id: int, order_update: 'PurchaseOrderSchemas.PurchaseOrderUpdate'):&#10;        db_order = self.get_purchase_order(order_id)&#10;        if not db_order:&#10;            return None&#10;        update_data = order_update.dict(exclude_unset=True)&#10;        for key, value in update_data.items():&#10;            setattr(db_order, key, value)&#10;        self.db.commit()&#10;        self.db.refresh(db_order)&#10;        return db_order&#10;&#10;    def delete_purchase_order(self, order_id: int):&#10;        db_order = self.get_purchase_order(order_id)&#10;        if not db_order:&#10;            return None&#10;        self.db.delete(db_order)&#10;        self.db.commit()&#10;        return db_order" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>