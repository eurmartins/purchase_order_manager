<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/app/crud/user.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/crud/user.py" />
              <option name="originalContent" value="from sqlalchemy.orm import Session&#10;from app.models.user import User&#10;from app.schemas.user import UserSchemas&#10;from app.core.security import get_password_hash&#10;&#10;class UserCRUD:&#10;    def __init__(self, db: Session, user_schemas=UserSchemas):&#10;        self.db = db&#10;        self.user_schemas = user_schemas&#10;&#10;    def get_user_by_email(self, email: str):&#10;        return self.db.query(User).filter(User.email == email).first()&#10;&#10;    def get_user_by_username(self, username: str):&#10;        return self.db.query(User).filter(User.username == username).first()&#10;&#10;    def create_user(self, user: 'UserSchemas.UserCreate'):&#10;        db_user = User(&#10;            username=user.username,&#10;            email=user.email,&#10;            password_hash=get_password_hash(user.password),&#10;            role=user.role&#10;        )&#10;        self.db.add(db_user)&#10;        self.db.commit()&#10;        self.db.refresh(db_user)&#10;        return db_user&#10;&#10;    def get_user(self, user_id: int):&#10;        return self.db.query(User).filter(User.id == user_id).first()&#10;&#10;    def get_users(self):&#10;        return self.db.query(User).all()&#10;&#10;    def update_user(self, user_id: int, user_update: 'UserSchemas.UserUpdate'):&#10;        db_user = self.db.query(User).filter(User.id == user_id).first()&#10;        if not db_user:&#10;            return None&#10;&#10;        if user_update.username is not None:&#10;            db_user.username = user_update.username&#10;        if user_update.email is not None:&#10;            db_user.email = user_update.email&#10;        if user_update.password is not None:&#10;            db_user.password_hash = get_password_hash(user_update.password)&#10;        if user_update.role is not None:&#10;            db_user.role = user_update.role&#10;&#10;        self.db.commit()&#10;        self.db.refresh(db_user)&#10;        return db_user&#10;&#10;    def delete_user(self, user_id: int):&#10;        db_user = self.db.query(User).filter(User.id == user_id).first()&#10;        if not db_user:&#10;            return None&#10;        self.db.delete(db_user)&#10;        return db_user" />
              <option name="updatedContent" value="from sqlalchemy.orm import Session&#10;from app.models.user import User&#10;from app.schemas.user import UserSchemas&#10;&#10;from app.core.security import get_password_hash&#10;&#10;class UserCRUD:&#10;    def __init__(self, db: Session, user_schemas=UserSchemas):&#10;        self.db = db&#10;        self.user_schemas = user_schemas&#10;&#10;    def get_user_by_email(self, email: str):&#10;        return self.db.query(User).filter(User.email == email).first()&#10;&#10;    def get_user_by_username(self, username: str):&#10;        return self.db.query(User).filter(User.username == username).first()&#10;&#10;    def create_user(self, user: 'UserSchemas.UserCreate'):&#10;        db_user = User(&#10;            username=user.username,&#10;            email=user.email,&#10;            password_hash=get_password_hash(user.password),&#10;            role=user.role&#10;        )&#10;        self.db.add(db_user)&#10;        self.db.commit()&#10;        self.db.refresh(db_user)&#10;        return db_user&#10;&#10;    def get_user(self, user_id: int):&#10;        return self.db.query(User).filter(User.id == user_id).first()&#10;&#10;    def get_users(self):&#10;        return self.db.query(User).all()&#10;&#10;    def update_user(self, user_id: int, user_update: 'UserSchemas.UserUpdate'):&#10;        db_user = self.db.query(User).filter(User.id == user_id).first()&#10;        if not db_user:&#10;            return None&#10;&#10;        if user_update.username is not None:&#10;            db_user.username = user_update.username&#10;        if user_update.email is not None:&#10;            db_user.email = user_update.email&#10;        if user_update.password is not None:&#10;            db_user.password_hash = get_password_hash(user_update.password)&#10;        if user_update.role is not None:&#10;            db_user.role = user_update.role&#10;&#10;        self.db.commit()&#10;        self.db.refresh(db_user)&#10;        return db_user&#10;&#10;    def delete_user(self, user_id: int):&#10;        db_user = self.db.query(User).filter(User.id == user_id).first()&#10;        if not db_user:&#10;            return None&#10;        self.db.delete(db_user)&#10;        return db_user" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/app/enums/roles.py">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/app/enums/roles.py" />
              <option name="originalContent" value="import enum&#10;&#10;class UserRole(str, enum.Enum):&#10;    ADMIN = &quot;admin&quot;&#10;    USER = &quot;user&quot;&#10;    MANAGER = &quot;manager&quot;&#10;" />
              <option name="updatedContent" value="import enum&#10;&#10;class UserRole(str, enum.Enum):&#10;    ADMIN = &quot;admin&quot;&#10;    USER = &quot;user&quot;&#10;    MANAGER = &quot;manager&quot;&#10;" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>